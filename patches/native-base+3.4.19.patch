diff --git a/node_modules/native-base/lib/commonjs/core/color-mode/hooks.js b/node_modules/native-base/lib/commonjs/core/color-mode/hooks.js
index 8c5c5bb..a0bbdee 100644
--- a/node_modules/native-base/lib/commonjs/core/color-mode/hooks.js
+++ b/node_modules/native-base/lib/commonjs/core/color-mode/hooks.js
@@ -47,9 +47,8 @@ const useAppState = () => {
   const subscription = _react.default.useMemo(() => ({
     getCurrentValue: () => _reactNative.AppState.currentState,
     subscribe: callback => {
-      _reactNative.AppState.addEventListener('change', callback);
-
-      return () => _reactNative.AppState.removeEventListener('change', callback);
+      const sb = _reactNative.AppState.addEventListener('change', callback);
+      return () => sb.remove();
     }
   }), []);
 
diff --git a/node_modules/native-base/lib/module/core/color-mode/hooks.js b/node_modules/native-base/lib/module/core/color-mode/hooks.js
index 84f1108..b5d7ef2 100644
--- a/node_modules/native-base/lib/module/core/color-mode/hooks.js
+++ b/node_modules/native-base/lib/module/core/color-mode/hooks.js
@@ -24,8 +24,8 @@ export const useAppState = () => {
   const subscription = React.useMemo(() => ({
     getCurrentValue: () => AppState.currentState,
     subscribe: callback => {
-      AppState.addEventListener('change', callback);
-      return () => AppState.removeEventListener('change', callback);
+      const sb = AppState.addEventListener('change', callback);
+      return () => sb.remove();
     }
   }), []);
   const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;
diff --git a/node_modules/native-base/src/core/color-mode/hooks.tsx b/node_modules/native-base/src/core/color-mode/hooks.tsx
index caf9079..e167b02 100644
--- a/node_modules/native-base/src/core/color-mode/hooks.tsx
+++ b/node_modules/native-base/src/core/color-mode/hooks.tsx
@@ -32,8 +32,9 @@ export const useAppState = () => {
     () => ({
       getCurrentValue: () => AppState.currentState,
       subscribe: (callback: () => void) => {
-        AppState.addEventListener('change', callback);
-        return () => AppState.removeEventListener('change', callback);
+        const sb = AppState.addEventListener('change', callback);
+        return () => sb.remove();
+
       },
     }),
     []
